#!/usr/bin/env bash

# takes a Canon image as reference time, and then
# looks up the rpi image from the logs

set -u
set -e
trap 'echo "Error line $LINENO"' ERR

filename=$(basename $1)

tempname=/dev/shm/$filename
cp $1 $tempname

# imagemagick uses /tmp as default TMPDIR, so tell it to use something else:
export TMPDIR=/dev/shm/

# adjust the time. add 22 seconds for clock sync based on IMG_7248
exiftool -AllDates+='0:0:22' $tempname

# get current time
timestamp_search_colons=$(identify -format "%[EXIF:DateTime]" $tempname | awk '{print $2}')
echo "Time: $timestamp_search_colons"
timestamp_search=$(echo $timestamp_search_colons | sed s/://g)

# find matching gps sentence
fgrep "GNGGA,$timestamp_search" gps-log
GPSLatitude=$(fgrep "GNGGA,$timestamp_search" gps-log | cut -d, -f3)
GPSLatitudeRef=$(fgrep "GNGGA,$timestamp_search" gps-log | cut -d, -f4)
GPSLongitude=$(fgrep "GNGGA,$timestamp_search" gps-log | cut -d, -f5)
GPSLongitudeRef=$(fgrep "GNGGA,$timestamp_search" gps-log | cut -d, -f6)
GPSAltitude=$(fgrep "GNGGA,$timestamp_search" gps-log | cut -d, -f10)
GPSAltitudeRef=$(fgrep "GNGGA,$timestamp_search" gps-log | cut -d, -f11)

# put GPS data into tag
cmd="exiftool  \
    -GPSLatitude=$GPSLatitude \
    -GPSLatitudeRef=$GPSLatitudeRef \
    -GPSLongitude=$GPSLongitude \
    -GPSLongitudeRef=$GPSLongitudeRef \
    -GPSAltitude=$GPSAltitude \
    $tempname"
$cmd

# force orientation to horizontal; some frames are sideways but this messes up output consistency
exiftool -Orientation#=1 $tempname

tracker_output_string=""
# now seek back in syslog and find sensor data...
most_recent_tx=$(fgrep "GNGGA,$timestamp_search" syslog -B 50 | fgrep "TX: \$\$EAGLE" | fgrep -v NOFIX | tail -n 1 | cut -d\  -f7-)
if [ "$most_recent_tx" != "" ]; then
    sentence_id=$(echo $most_recent_tx | cut -d, -f2)
    external_temperature=$(echo $most_recent_tx | cut -d, -f8)
    pressure=$(echo $most_recent_tx | cut -d, -f9)
    humidity=$(echo $most_recent_tx | cut -d, -f10)
    internal_temperature=$(echo $most_recent_tx | cut -d, -f11 | cut -d\* -f1)
    tracker_output_string="EAGLE (sdcard)
Altitude=$GPSAltitude
$GPSLatitude $GPSLatitudeRef, $GPSLongitude $GPSLongitudeRef
TX id: $sentence_id
External: $external_temperature°C, ${pressure}mb, $humidity%%RH
Internal: $internal_temperature°C
"

else
    # if there is no matching telemetry string on-board, just note error:
    echo "No GPS data at $timestamp_search"
    tracker_output_string="No Data
"
fi

# and then seek back in syslog to find relevant rpi photo
most_recent_rpi_photo_id=$(fgrep "GNGGA,$timestamp_search" syslog -B 50 | fgrep "Camera: taking picture" | tail -n 1 | cut -d/ -f5-)
most_recent_rpi_photo="../tracker-home-pi/pi/photos/$most_recent_rpi_photo_id"
if [ "$most_recent_rpi_photo_id" == "" ]; then
    most_recent_rpi_photo="blank-rpi-frame.jpg"
fi
if [ ! -s "$most_recent_rpi_photo" ]; then
    most_recent_rpi_photo="blank-rpi-frame.jpg"
fi
echo "Pi photo: $most_recent_rpi_photo"
pi_rotated=$(mktemp /dev/shm/rpi-tmp.XXXXXX)
cp -p $most_recent_rpi_photo $pi_rotated
convert -rotate 180 $most_recent_rpi_photo $pi_rotated


# format string to pass to identify
format="
Tracker: $tracker_output_string
%[EXIF:DateTime]
"

# do the work
# note the identify subprocess inline...

mkdir -p output-combined

convert $tempname \
    -gravity northeast \
    $pi_rotated +smush 0x0 \
    -gravity southeast \
    -pointsize 100 -fill black -stroke white -strokewidth 2 \
    -annotate +20+0 "`identify -format \"$format\" \$tempname`" \
    output-combined/$filename

rm $tempname*
rm $pi_rotated
